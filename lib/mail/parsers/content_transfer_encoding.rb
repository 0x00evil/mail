# Autogenerated from a Treetop grammar. Edits may be lost.


module Mail
  module ContentTransferEncoding
    include Treetop::Runtime

    def root
      @root ||= :primary
    end

    include RFC2822

    include RFC2045

    module Primary0
      def CFWS
        elements[0]
      end

    end

    module Primary1
      def CFWS1
        elements[0]
      end

      def encoding
        elements[1]
      end

      def CFWS2
        elements[3]
      end
    end

    def _nt_primary
      start_index = index
      if node_cache[:primary].has_key?(index)
        cached = node_cache[:primary][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_CFWS
      s0 << r1
      if r1
        r2 = _nt_encoding
        s0 << r2
        if r2
          i4, s4 = index, []
          r5 = _nt_CFWS
          s4 << r5
          if r5
            if has_terminal?(";", false, index)
              r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(";")
              r6 = nil
            end
            s4 << r6
          end
          if s4.last
            r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
            r4.extend(Primary0)
          else
            @index = i4
            r4 = nil
          end
          if r4
            r3 = r4
          else
            r3 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r3
          if r3
            r7 = _nt_CFWS
            s0 << r7
          end
        end
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(Primary1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:primary][start_index] = r0

      r0
    end

    module Encoding0
      def encoding
        ietf_token.text_value || x_token.text_value
      end
    end

    def _nt_encoding
      start_index = index
      if node_cache[:encoding].has_key?(index)
        cached = node_cache[:encoding][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_ietf_token
      if r1
        r0 = r1
        r0.extend(Encoding0)
      else
        r2 = _nt_x_token
        if r2
          r0 = r2
          r0.extend(Encoding0)
        else
          @index = i0
          r0 = nil
        end
      end

      node_cache[:encoding][start_index] = r0

      r0
    end

    def _nt_ietf_token
      start_index = index
      if node_cache[:ietf_token].has_key?(index)
        cached = node_cache[:ietf_token][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      if has_terminal?("7bit", false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 4))
        @index += 4
      else
        terminal_parse_failure("7bit")
        r1 = nil
      end
      if r1
        r0 = r1
      else
        if has_terminal?("8bit", false, index)
          r2 = instantiate_node(SyntaxNode,input, index...(index + 4))
          @index += 4
        else
          terminal_parse_failure("8bit")
          r2 = nil
        end
        if r2
          r0 = r2
        else
          if has_terminal?("binary", false, index)
            r3 = instantiate_node(SyntaxNode,input, index...(index + 6))
            @index += 6
          else
            terminal_parse_failure("binary")
            r3 = nil
          end
          if r3
            r0 = r3
          else
            if has_terminal?("quoted-printable", false, index)
              r4 = instantiate_node(SyntaxNode,input, index...(index + 16))
              @index += 16
            else
              terminal_parse_failure("quoted-printable")
              r4 = nil
            end
            if r4
              r0 = r4
            else
              if has_terminal?("base64", false, index)
                r5 = instantiate_node(SyntaxNode,input, index...(index + 6))
                @index += 6
              else
                terminal_parse_failure("base64")
                r5 = nil
              end
              if r5
                r0 = r5
              else
                @index = i0
                r0 = nil
              end
            end
          end
        end
      end

      node_cache[:ietf_token][start_index] = r0

      r0
    end

  end

  class ContentTransferEncodingParser < Treetop::Runtime::CompiledParser
    include ContentTransferEncoding
  end

end